"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formPlugin = exports.requestParserFactory = exports.FormPluginContentTypes = void 0;
const busboy_1 = __importDefault(require("busboy"));
const lodash_1 = require("lodash");
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
var FormPluginContentTypes;
(function (FormPluginContentTypes) {
    FormPluginContentTypes["FromMultipart"] = "multipart/form-data";
    FormPluginContentTypes["FormUrlencoded"] = "application/x-www-form-urlencoded";
})(FormPluginContentTypes = exports.FormPluginContentTypes || (exports.FormPluginContentTypes = {}));
const attachToBodySafe = (options, body, field, value) => {
    const action = Object.getOwnPropertyDescriptor(Object.prototype, field)
        ? field === 'constructor'
            ? options.onConstructorPoisoning
            : options.onProtoPoisoning
        : 'ignore';
    switch (action) {
        case 'ignore':
            return attachToBody(body, field, value);
        case 'error':
            throw new SyntaxError('Object contains forbidden prototype property');
        case 'remove':
            return;
    }
};
const attachToBody = (body, field, value) => {
    if (body[field]) {
        if (Array.isArray(body[field])) {
            body[field].push(value);
        }
        else {
            body[field] = [body[field], value];
        }
    }
    else {
        body[field] = value;
    }
};
const defaultOptions = {
    multipart: true,
    urlencoded: true,
};
const getPluginOptions = (instance, { busboyOptions, ...pluginOptions }) => Object.assign({}, (0, lodash_1.pick)(instance.initialConfig, ['onConstructorPoisoning', 'onProtoPoisoning']), defaultOptions, pluginOptions, { busboyOptions: (0, lodash_1.cloneDeep)(busboyOptions || {}) });
const requestParserFactory = ({ busboyOptions, ...parserOptions }) => (req) => new Promise((resolve, reject) => {
    try {
        const request = req.raw;
        const body = {};
        const bb = (0, busboy_1.default)(Object.assign({ headers: request.headers }, busboyOptions));
        bb.on('field', (field, value) => {
            try {
                attachToBodySafe(parserOptions, body, field, value);
            }
            catch (error) {
                reject(error);
            }
        });
        bb.on('finish', () => resolve(body));
        bb.on('error', (error) => reject(error));
        request.pipe(bb);
    }
    catch (error) {
        reject(error);
    }
});
exports.requestParserFactory = requestParserFactory;
const formPlugin = async (instance, options) => {
    const { multipart, urlencoded, ...parserOptions } = getPluginOptions(instance, options);
    const contentTypes = [
        ...(multipart ? [FormPluginContentTypes.FromMultipart] : []),
        ...(urlencoded ? [FormPluginContentTypes.FormUrlencoded] : []),
    ];
    if (contentTypes.length) {
        instance.addContentTypeParser(contentTypes, (0, exports.requestParserFactory)(parserOptions));
    }
};
exports.formPlugin = formPlugin;
exports.default = (0, fastify_plugin_1.default)(exports.formPlugin, {
    fastify: '>=4.x',
});
